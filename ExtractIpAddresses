import java.util.HashMap;
import java.util.Map;

public class ExtractIpAddress {
	
	 public static String[] log = {
			 "2024-06-24 10:15:32 192.168.1.100 - GET /index.html 200\n"
			, "2024-06-24 10:17:20 192.168.1.105 - GET /images/logo.png 200\n"
		 	, "2024-06-24 10:17:20 192.168.1.105 - GET /images/logo.png 200\n"
		 	, "2024-06-24 10:17:20 192.168.1.105 - GET /images/logo.png 200\n"
		 	, "2024-06-24 10:17:20 192.168.1.105 - GET /images/logo.png 200\n"
	 		, "2024-06-24 10:16:05 192.168.1.102 - POST /submit-form 404\n"
	 		, "2024-06-24 10:16:05 192.168.1.102 - POST /submit-form 404\n"
	 		, "2024-06-24 10:16:05 192.168.1.102 - POST /submit-form 404\n"	 		
	 		, "2024-06-24 10:16:05 192.168.1.102 - POST /submit-form 404\n"
	 		, "2024-06-24 10:16:05 192.168.1.102 - POST /submit-form 404\n"
	 		};
	 
	 public static void extractIpAddress(String[] theLog, Map<String, Integer> IpCount) {
		 for (String log: theLog) {
			 StringBuilder sb = new StringBuilder();
			 boolean inIpAddress = false;
			 
			 for(int i =0; i < log.length(); i++) {
				 char ch = log.charAt(i);
				 
				 if(Character.isDigit(ch)|| ch =='.') {					 
					 sb.append(ch);					
					 inIpAddress = true;
				 }else if(inIpAddress){
					 String ipAddress = sb.toString();
					 
					 if(isValidIp(ipAddress)) {
						 
						 IpCount.put(ipAddress, IpCount.getOrDefault(ipAddress,0)+1);
						 
					 }
					 sb.setLength(0);
					 inIpAddress = false;
					 
				 }
			 }
		 }		 
	 }
	 public static boolean isValidIp(String ip) {
		 
		 String [] parts  = ip.split("\\.");
		
		 if(parts.length != 4) return false;
		 for(String part: parts) {
			 
			 try{
				int num = Integer.parseInt(part);
				if(num<0 || num>255) return false;
			 }catch (NumberFormatException e) {
				return false;
			}
		 }
		 return true;
	 }
	 
	 public static String findMostLoggedIP(Map<String, Integer> ipAddressMap) {
		 String mostLogIp = null;
		 int maxCount = 0;
		 
		 for(Map.Entry<String, Integer> entry : ipAddressMap.entrySet()) {
			 if(entry.getValue() > maxCount) {
				 mostLogIp = entry.getKey();
				 maxCount  = entry.getValue();
			 }
		 }
		 return mostLogIp;
		 
	 }
	 
	 
	 public static void main(String[] args) {
		Map <String, Integer> ipCount = new HashMap<>();
		extractIpAddress(log, ipCount);
		
		String mostLoggedIp = findMostLoggedIP(ipCount);
		System.out.println("The most logged Ip Address is : "+mostLoggedIp);
		
		

	}

}
